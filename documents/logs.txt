January
	Week 1
		Template expression tree, two variables (bbird)
		Compile time infix parser, no variables
	Week 2
		Found ctre (compile time regular expression) on github
		String literal template param
		Constexpr string
		Learned C++ variadic and fold expression
	Week 3
		g++ 9.2.0 build
		Pure template math, pair, and value shim
		Constexpr tokenizer
		Compile time string literal prefix parser, variadic variables
	Week 4
		Python recursive descent infix parser (bbird)
		Compile time string literal infix parser, variadic variables
February
	Week 1
		Recursive variadic schema and row classes
		Support structured binding declarations and range loop
	Week 2
		Basic unary relational algebra operators (pi, and rho)
		Relational algebra terminal (relation) 
		Changed architecture to template recursive (to support compile time parsing)
		Changed schema to single vector (for performance)
		Added infrastructure for indexes, binary RA operators, an sigma
	Week 3
		Runtime recursive descent SQL parser/validator
	Week 4
		Write up
March
	Week 1
		Constexpr template recursive recursive descent SQL parser up to "FROM"
	Week 2
		Constexpr template recursive where predicate parser
		Constexpr template recursive join parser
		Triggered seg fault in GCC 9.2 regarding:
			returning copy-elided constexpr object through
			static constexpr function member with auto return type deduction into a
			constexpr object template non-type parameter 
